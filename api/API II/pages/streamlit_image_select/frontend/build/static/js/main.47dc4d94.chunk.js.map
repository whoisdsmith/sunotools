{"version":3,"sources":["index.tsx"],"names":["labelDiv","document","body","appendChild","createElement","label","createTextNode","container","classList","add","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","theme","style","font","color","textColor","base","querySelectorAll","forEach","el","remove","textContent","args","images","captions","titles","childNodes","length","image","i","item","box","img","src","caption","innerHTML","title","onclick","setComponentValue","onerror","setFrameHeight","setComponentReady"],"mappings":"iKAAA,kBAEA,MAAMA,EAAWC,SAASC,KAAKC,YAAYF,SAASG,cAAc,UAC5DC,EAAQL,EAASG,YAAYF,SAASK,eAAe,KACrDC,EAAYN,SAASC,KAAKC,YAAYF,SAASG,cAAc,QACnEG,EAAUC,UAAUC,IAAI,aAwFxBC,IAAUC,OAAOC,iBAAiBF,IAAUG,cAjF5C,SAAkBC,GAEhB,MAAMC,EAAQD,EAAkCE,OAE5CD,EAAKE,QACPjB,EAASkB,MAAMC,KAAOJ,EAAKE,MAAME,KACjCnB,EAASkB,MAAME,MAAQL,EAAKE,MAAMI,UACV,SAApBN,EAAKE,MAAMK,KACbrB,SAASC,KAAKqB,iBAAiB,kBAAkBC,QAASC,IACxDA,EAAGjB,UAAUC,IAAI,UAGnBR,SAASC,KAAKqB,iBAAiB,kBAAkBC,QAASC,IACxDA,EAAGjB,UAAUkB,OAAO,WAO1BrB,EAAMsB,YAAcZ,EAAKa,KAAY,MACrC,IAAIC,EAASd,EAAKa,KAAa,OAC3BE,EAAWf,EAAKa,KAAe,SAE/BG,EAAShB,EAAKa,KAAa,OAGK,IAAhCrB,EAAUyB,WAAWC,QACvBJ,EAAOL,QAAQ,CAACU,EAAeC,KAC7B,IAAIC,EAAO7B,EAAUJ,YAAYF,SAASG,cAAc,QACxDgC,EAAK5B,UAAUC,IAAI,SACsB,IAArCM,EAAKa,KAA0B,qBACjCQ,EAAK5B,UAAUC,IAAI,WAGrB,IAAI4B,EAAMD,EAAKjC,YAAYF,SAASG,cAAc,QAClDiC,EAAI7B,UAAUC,IAAI,aAElB,IAAI6B,EAAMD,EAAIlC,YAAYF,SAASG,cAAc,QAIjD,GAHAkC,EAAI9B,UAAUC,IAAI,SAClB6B,EAAIC,IAAML,EAENJ,EAAU,CACZ,IAAIU,EAAUJ,EAAKjC,YAAYF,SAASG,cAAc,QACtDoC,EAAQhC,UAAUC,IAAI,WACtB+B,EAAQC,UAAYX,EAASK,GAG3BJ,IACFO,EAAII,MAAQX,EAAOI,IAGjBA,IAAMpB,EAAKa,KAAY,QACzBS,EAAI7B,UAAUC,IAAI,YAClB6B,EAAI9B,UAAUC,IAAI,aAGpB6B,EAAIK,QAAU,WACZpC,EAAUgB,iBAAiB,aAAaC,QAASC,IAC/CA,EAAGjB,UAAUkB,OAAO,cAEtBhB,IAAUkC,kBAAkBT,GAC5BE,EAAI7B,UAAUC,IAAI,YAClB6B,EAAI9B,UAAUC,IAAI,aAGpB6B,EAAIO,QAAU,WACZP,EAAIC,IAAM,oBACVD,EAAIO,QAAU,QASpBnC,IAAUoC,oBAQZpC,IAAUqC,oBAIVrC,IAAUoC,mB","file":"static/js/main.47dc4d94.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\nconst labelDiv = document.body.appendChild(document.createElement(\"label\"))\nconst label = labelDiv.appendChild(document.createTextNode(\"\"))\nconst container = document.body.appendChild(document.createElement(\"div\"))\ncontainer.classList.add(\"container\")\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  if (data.theme) {\n    labelDiv.style.font = data.theme.font\n    labelDiv.style.color = data.theme.textColor\n    if (data.theme.base === \"dark\") {\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\n        el.classList.add(\"dark\")\n      })\n    } else {\n      document.body.querySelectorAll(\".box, .caption\").forEach((el) => {\n        el.classList.remove(\"dark\")\n      })\n    }\n\n    // TODO: Gray out the component if it's disabled.\n  }\n\n  label.textContent = data.args[\"label\"]\n  let images = data.args[\"images\"]\n  let captions = data.args[\"captions\"]\n  // console.log(captions)\n  let titles = data.args[\"titles\"]\n  // console.log(titles)\n\n  if (container.childNodes.length === 0) {\n    images.forEach((image: string, i: number) => {\n      let item = container.appendChild(document.createElement(\"div\"))\n      item.classList.add(\"item\")\n      if (data.args[\"use_container_width\"] === true) {\n        item.classList.add(\"stretch\")\n      }\n\n      let box = item.appendChild(document.createElement(\"div\"))\n      box.classList.add(\"image-box\")\n\n      let img = box.appendChild(document.createElement(\"img\"))\n      img.classList.add(\"image\")\n      img.src = image\n\n      if (captions) {\n        let caption = item.appendChild(document.createElement(\"div\"))\n        caption.classList.add(\"caption\")\n        caption.innerHTML = captions[i]\n      }\n\n      if (titles) {\n        img.title = titles[i]\n      }\n\n      if (i === data.args[\"index\"]) {\n        box.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n\n      img.onclick = function () {\n        container.querySelectorAll(\".selected\").forEach((el) => {\n          el.classList.remove(\"selected\")\n        })\n        Streamlit.setComponentValue(i)\n        box.classList.add(\"selected\")\n        img.classList.add(\"selected\")\n      }\n\n      img.onerror = function () {\n        img.src = \"static/sunoai.jpg\"\n        img.onerror = null; //控制不要一直跳动 \n      }\n    })\n  }\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}