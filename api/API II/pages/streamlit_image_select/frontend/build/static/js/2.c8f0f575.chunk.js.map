{"version":3,"sources":["../node_modules/react/index.js","../../src/event.mjs","../../src/event-target.mjs","../node_modules/flatbuffers/js/flatbuffers.mjs","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../util/utf8.ts","../io/interfaces.ts","../util/compat.ts","../util/buffer.ts","../io/adapters.ts","../vector.ts","../fb/Schema.ts","../fb/Message.ts","../enum.ts","../util/bit.ts","../visitor.ts","../visitor/typecomparator.ts","../type.ts","../data.ts","../util/pretty.ts","../builder/valid.ts","../builder/buffer.ts","../builder.ts","../builder/bool.ts","../builder/null.ts","../builder/date.ts","../builder/decimal.ts","../builder/dictionary.ts","../builder/fixedsizebinary.ts","../util/math.ts","../builder/float.ts","../util/bn.ts","../builder/int.ts","../builder/time.ts","../builder/timestamp.ts","../builder/interval.ts","../builder/binary.ts","../builder/utf8.ts","../builder/run.ts","../vector/row.ts","../util/vector.ts","../vector/chunked.ts","../column.ts","../util/args.ts","../schema.ts","../builder/list.ts","../builder/fixedsizelist.ts","../builder/map.ts","../builder/struct.ts","../builder/union.ts","../visitor/set.ts","../visitor/builderctor.ts","../fb/File.ts","../builder/index.ts","../ipc/metadata/file.ts","../io/stream.ts","../io/file.ts","../util/int.ts","../visitor/vectorloader.ts","../visitor/typeassembler.ts","../ipc/metadata/json.ts","../ipc/metadata/message.ts","../ipc/message.ts","../visitor/vectorassembler.ts","../ipc/writer.ts","../util/recordbatch.ts","../vector/base.ts","../vector/binary.ts","../vector/bool.ts","../vector/date.ts","../vector/decimal.ts","../vector/dictionary.ts","../vector/fixedsizebinary.ts","../vector/fixedsizelist.ts","../vector/float.ts","../vector/interval.ts","../vector/int.ts","../vector/list.ts","../vector/map.ts","../vector/null.ts","../vector/struct.ts","../vector/timestamp.ts","../vector/time.ts","../vector/union.ts","../vector/utf8.ts","../util/fn.ts","../visitor/get.ts","../visitor/indexof.ts","../visitor/iterator.ts","../visitor/toarray.ts","../visitor/bytewidth.ts","../visitor/vectorctor.ts","../vector/index.ts","../table.ts","../recordbatch.ts","../ipc/reader.ts","../io/whatwg/builder.ts","../compute/predicate.ts","../compute/dataframe.ts","../Arrow.dom.ts","../io/whatwg/iterable.ts","../io/whatwg/reader.ts","../io/whatwg/writer.ts","../node_modules/streamlit-component-lib/dist/ArrowTable.js","../node_modules/streamlit-component-lib/dist/streamlit.js","../node_modules/streamlit-component-lib/dist/StreamlitReact.js","../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../node_modules/react-is/index.js","../node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/object-assign/index.js"],"names":["module","exports","require","privateData","WeakMap","wrappers","pd","event","retv","get","console","assert","setCancelFlag","data","passiveListener","cancelable","canceled","preventDefault","error","Event","eventTarget","set","this","eventPhase","currentTarget","stopped","immediateStopped","timeStamp","Date","now","Object","defineProperty","value","enumerable","keys","i","length","key","defineRedirectDescriptor","configurable","defineCallDescriptor","apply","arguments","getWrapper","proto","prototype","wrapper","BaseEvent","CustomEvent","call","create","constructor","writable","isFunc","getOwnPropertyDescriptor","defineWrapper","getPrototypeOf","isStopped","setPassiveListener","type","stopPropagation","stopImmediatePropagation","Boolean","bubbles","composed","cancelBubble","window","setPrototypeOf","listenersMap","isObject","x","getListeners","listeners","TypeError","defineEventAttribute","eventTargetPrototype","eventName","node","listenerType","listener","next","prev","delete","newNode","passive","once","defineEventAttributeDescriptor","defineCustomEventTarget","eventNames","CustomEventTarget","EventTarget","Array","isArray","types","Map","options","optionsIsObj","capture","undefined","wrappedEvent","wrapEvent","err","handleEvent","setEventPhase","setCurrentTarget","defaultPrevented","flatbuffers","inRange","a","min","max","ToDictionary","o","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","j","push","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","s","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","t","__string","opt_encoding","b","c","__indirect","__vector","__vector_len","__has_identifier","ident","Stream","tokens","slice","endOfStream","read","shift","prepend","token","unshift","pop","decoderError","fatal","opt_code_point","TextDecoder","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","count","temp","decode","input","ArrayBuffer","byteOffset","byteLength","input_stream","code_points","indexOf","cp","codePointsToString","encode","opt_string","string","n","u","d","stringToCodePoints","_Buffer","Buffer","useNativeEncoders","decodeUtf8","decoder","toUint8Array","from","toString","encodeUtf8","encoder","ITERATOR_DONE","freeze","done","ArrowJSON","_json","ReadableInterop","_getDOMStream","tee","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","super","_values","resolvers","_closedPromise","Promise","r","_closedPromiseResolve","reason","return","_ensureOpen","resolve","_error","reject","Symbol","asyncIterator","_","abort","close","BigIntCtor","BigIntAvailable","BigIntUnavailableError","BigIntUnavailable","asIntN","asUintN","BigInt","BigInt64ArrayCtor","BigInt64ArrayAvailable","BigInt64ArrayUnavailableError","BigInt64Array","BigUint64ArrayCtor","BigUint64ArrayAvailable","BigUint64ArrayUnavailableError","BigUint64Array","isNumber","isBoolean","isFunction","isPromise","then","isIterable","iterator","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isReadableDOMStream","isReadableNodeStream","SharedArrayBuf","SharedArrayBuffer","memcpy","target","source","targetByteOffset","sourceByteLength","targetByteLength","dst","src","Math","joinUint8Arrays","chunks","sliced","xOffset","yOffset","xLen","yLen","y","collapseContiguousByteRanges","reduce","index","Infinity","toArrayBufferView","ArrayBufferViewCtor","isView","BYTES_PER_ELEMENT","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toBigInt64Array","toUint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","pump","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","async","toArrayBufferViewAsyncIterator","emit","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","fromIterable","cmd","threw","bufferLength","isNaN","e","throw","fromAsyncIterable","fromDOMStream","releaseLock","fromNodeStream","events","onEvent","race","map","isFinite","evt","fn","destroy","cleanup","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","mode","readInto","AbstractVector","arrow","apache","org","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","__init","builder","startNull","endNull","Struct_","startStruct_","endStruct_","List","startList","endList","LargeList","startLargeList","endLargeList","FixedSizeList","listSize","startFixedSizeList","addListSize","endFixedSizeList","keysSorted","startMap","addKeysSorted","endMap","Union","Sparse","typeIdsOffset","numElems","startUnion","addMode","addTypeIds","endUnion","Int","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","startUtf8","endUtf8","Binary","startBinary","endBinary","LargeUtf8","startLargeUtf8","endLargeUtf8","LargeBinary","startLargeBinary","endLargeBinary","FixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","startBool","endBool","Decimal","scale","startDecimal","addScale","endDecimal","MILLISECOND","unit","startDate","addUnit","endDate","Time","startTime","endTime","Timestamp","SECOND","optionalEncoding","timezoneOffset","startTimestamp","addTimezone","endTimestamp","Interval","YEAR_MONTH","startInterval","endInterval","Duration","startDuration","endDuration","KeyValue","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DictionaryEncoding","id","indexTypeOffset","isOrdered","startDictionaryEncoding","addId","addIndexType","addIsOrdered","endDictionaryEncoding","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Schema","Little","endianness","fieldsOffset","startSchema","addEndianness","addFields","endSchema","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","DictionaryBatch","dataOffset","isDelta","startDictionaryBatch","addData","addIsDelta","endDictionaryBatch","Message","V1","version","headerType","headerOffset","bodyLength","startMessage","addVersion","addHeaderType","addHeader","addBodyLength","endMessage","BufferType","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","values","xs","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","Visitor","nodes","args","visit","getVisitFn","visitor","throwIfNotFound","dtype","inferDType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","Struct","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","typeId","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","schema","instance","compareFields","fields","others","every","f","compareField","name","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","timezone","compareTime","compareUnion","typeIds","children","compareInterval","indices","dictionary","toStringTag","ArrayType","child","valueType","join","typeIdToChildIndex","idx","getId","atomicDictionaryId","strideForType","nullCount","childData","floor","_nullCount","stride","nullBitmap","childStride","_sliceBuffers","clone","_sliceChildren","newLength","fill","VALIDITY","TYPE","OFFSET","DATA","valueOffsetsOrChildren","valueToString","toPrimitive","JSON","stringify","createIsValidFunction","nullValues","fnBody","noNaNs","filter","valueToCase","Function","roundLengthUpToNearest64Bytes","BPE","_resize","extra","reserved","array","sliceOrExtendArray","DataBufferBuilder","reserve","BitmapBufferBuilder","numValid","val","cur","OffsetsBufferBuilder","flush","_ArrayType64","buffer64","ArrayType64","nulls","finished","_nulls","_isValid","queueingStrategy","highWaterMark","sizeProperty","numChunks","new","append","toVector","throughIterable","throughAsyncIterable","numInvalid","_offsets","_typeIds","reservedLength","reservedByteLength","setValid","isValid","setValue","_setValue","valid","numChildren","offsets","last","forEach","opts","_pendingLength","pending","_pending","current","_flush","pendingLength","_flushPending","DateDayBuilder","DateMillisecondBuilder","hashFn","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","_dictionary","curr","concat","f64","u32","uint16ToFloat64","h","expo","sigf","sign","NaN","float64ToUint16","Float32Builder","Float64Builder","isArrowBigNumSymbol","for","BigNum","SignedBigNum","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","hi","lo","signed","words","number","bignumToString","bignumToBigInt","decimalToString","digits","base64","base32","checks","reverse","toJSON","valueOf","hint","assign","num","Int8Builder","Int16Builder","Int32Builder","toBigInt","Uint8Builder","Uint16Builder","Uint32Builder","memo","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","kParent","kRowIndex","kKeyToIdx","kIdxToVal","kCustomInspect","parent","numKeys","ktoi","itov","getValue","getIndex","ki","vi","k","v","kr","vr","has","callbackfn","thisArg","callback","m","str","defineProperties","MapRow","createRowProxy","getChildAt","StructRow","defineRowProxyProperties","findIndex","desc","row","getter","setter","hasOwnProperty","Proxy","getKey","RowProxyHandler","isExtensible","deleteProperty","preventExtensions","ownKeys","receiver","Reflect","clampIndex","adjust","tmp","clampRange","end","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","comparators","createSubElementsComparator","creatMapComparator","createArrayLikeComparator","createVectorComparator","createObjectComparator","compareArray","compareObject","vec","compareVector","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","vectors","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","selectChunkArgs","flatten","chunk","isDictionary","_indices","_sliceInternal","columns","_children","vector","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","chunkIndex","fromIndex","start","found","slices","chunkOffsets","chunkLength","chunkOffset","to","_field","SingleChunkColumn","rest","some","metadata","column","_chunk","selectArgs","Ctor","vals","_selectArgs","selectFieldArgs","_selectFieldArgs","_selectChunkArgs","res","selectVectorChildrenArgs","_selectVectorChildrenArgs","toKeysAndValues","ret","entries","fieldIndex","valueIndex","dictionaries","generateDictionaryMap","compareSchemas","columnNames","names","columnIndices","curFields","mergeMaps","newFields","f2","newDictionaries","m1","m2","_run","run","bind","childIndex","_valueToChildTypeId","childTypeId","SparseUnionBuilder","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","values64","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","itr","_setStructVectorValue","_setStructArrayValue","_setStructObjectValue","newBuilder","defaultOptions","getChildOptions","T","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","startFooter","addSchema","addDictionaries","addRecordBatches","endFooter","metaDataLength","_Block","_Footer","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","buf","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","numRecordBatches","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","finishFooterBuffer","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","write","peek","body","closed","cancel","readAt","getInt32","nBytes","file","_handle","stat","bytesRead","intAsHex","kPowersOfTen","BaseInt64","L","R","product","lessThan","_times","_plus","out_buffer","fromString","out","posn","group","parseInt","substr","multiple","times","plus","left","right","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","readDictionary","nextBufferRange","sources","isTimestamp","isInt","isTime","isDate","convertArray","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","startTypeIdsVector","createTypeIdsVector","indexType","recordBatchFromJSON","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","BufferRegion","schemaFieldsFromJSON","_schema","fromJSON","fieldChildrenFromJSON","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","header","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","finishMessageBuffer","_nodes","_buffers","_id","_isDelta","decodeFieldNodes","batch","nodesLength","decodeBuffers","bufferRegions","buffersLength","decodeSchemaFields","fieldsLength","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","dictType","dictMeta","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","platformIsLittleEndian","Big","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","dictionaryBatch","createFieldNode","createBuffer","setInt16","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","_body","_batchIndex","_dictionaryIndex","batches","flattenDataSources","MAGIC","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","_byteLength","_bufferRegions","assembler","vectorChildren","assembleResult","RangeError","isNull","addBuffer","_nullV","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","writableStrategy","readableStrategy","sync","writeAll","writeAllAsync","reset","sink","isWritableNodeStream","objectMode","_writeFooter","compareTo","_writeSchema","payload","_writeRecordBatch","flatbufferSize","prefixSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","assemble","_writeDictionaries","_writeBodyBuffers","padding","_writeDictionaryBatch","writer","_writeMagic","noopBuf","nullBufs","bitmapLength","distributeVectorsIntoRecordBatches","vecs","batchArgs","numBatches","batchLength","numColumns","Number","POSITIVE_INFINITY","distributeChildData","uniformlyDistributeChunksAcrossRecordBatches","_changeLengthAndBackfillNullBitmap","_bindDataAccessors","VectorName","isConcatSpreadable","vectorFromValuesWithType","DateDayVector","DateMillisecondVector","ArrowType","vectorTypeToDataType","InputType","arrayTypeToDataType","convertTo16Bit","Float16Vector","Float32Vector","Float64Vector","typeCtor","dataCtor","ctor","IntervalDayTimeVector","IntervalYearMonthVector","is64bit","convert32To64Bit","Int8Vector","Int16Vector","Int32Vector","_values64","Uint8Vector","Uint16Vector","Uint32Vector","_row","bound","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","DenseUnionVector","SparseUnionVector","partial0","partial2","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","decimal","indexOfValue","searchElement","indexOfNull","compare","indexOfUnion","vectorIterator","getFn","nullByte","nullBit","nullableIterator","arrayOfVector","variableWidthColumnErrorMessage","____","visitFields","newDataType","transform","getByteWidth","wrapNullableSet","VectorCtor","partialType0","empty","fromStruct","tableFromIterable","tableFromAsyncIterable","isSync","open","opening","cols","selectColumnArgs","getColumnAt","getColumnIndex","nameToIndex","selectAt","columnName","oldToNew","newIdx","_f","_fs","fs","vs","l","batchData","ensureSameLengthData","_dictionaries","collect","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchStreamReader","fromArrowJSON","AsyncRecordBatchFileReader","AsyncRecordBatchStreamReader","fromFileHandle","RecordBatchFileReader","fromAsyncByteStream","fromByteStream","readAllSync","readAllAsync","_recordBatchIndex","_loadVectors","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_readFooter","_readDictionaryBatch","seek","_numChunks","_finished","_bufferedSize","builderOptions","_controller","_builder","_getSize","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","_maybeFlush","WritableStream","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","Value","Literal","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","p","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","countBy","scan","scanReverse","predicate","batchIndex","numRows","count_by","countByteLength","ceil","log","counts","_predicate","isBound","and","bm","hwm","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","ComponentMessageType","ArrowTable","indexBuffer","columnsBuffer","styler","_this","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","content","dataColumnIndex","getContent","columnsTable","dataRowIndex","uuid","indexTable","displayValuesTable","dataTable","getColumnTypeId","nanosToDate","caption","displayValues","styles","numCols","rows","dataRows","dataColumns","serialize","nanos","__assign","Streamlit","API_VERSION","RENDER_EVENT","registeredMessageListener","setComponentReady","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","scrollHeight","lastFrameHeight","SET_FRAME_HEIGHT","setComponentValue","dataType","isBigIntArray","isTypedArray","SET_COMPONENT_VALUE","onRenderMessage","dataframeArgs","argsDataframeToObject","disabled","theme","_injectTheme","eventData","detail","dispatchEvent","argsDataframe","argsDataframeArrow","_a","toArrowTable","fromEntries","df","postMessage","isStreamlitMessage","style","createElement","head","appendChild","innerHTML","primaryColor","backgroundColor","secondaryBackgroundColor","textColor","font","__extends","extendStatics","__proto__","__","_super","StreamlitComponentBase","componentDidMount","componentDidUpdate","React","PureComponent","reactIs","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","displayName","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","arity","MEMO_STATICS","TYPE_STATICS","getStatics","component","isMemo","ForwardRef","render","Memo","getOwnPropertyNames","getOwnPropertySymbols","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","targetStatics","sourceStatics","descriptor","g","q","w","z","$$typeof","A","AsyncMode","ConcurrentMode","ContextConsumer","ContextProvider","Element","Fragment","Lazy","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","B","C","encodeURIComponent","D","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","E","F","props","refs","updater","G","H","isReactComponent","setState","forceUpdate","I","isPureReactComponent","J","K","ref","__self","__source","M","_owner","O","P","Q","keyPrefix","S","V","U","replace","escape","W","aa","X","N","Y","Z","ba","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","Children","only","Component","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","createFactory","createRef","forwardRef","isValidElement","lazy","_ctor","_status","_result","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","propIsEnumerable","propertyIsEnumerable","toObject","test1","test2","test3","split","letter","shouldUseNative","symbols"],"mappings":"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","file":"static/js/2.c8f0f575.chunk.js","sourcesContent":["'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap()\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap()\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event)\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            )\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault()\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    })\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true })\n\n    // Define accessors\n    const keys = Object.keys(event)\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key))\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation()\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        data.immediateStopped = true\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation()\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this))\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this))\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype)\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event)\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto)\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event)\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    })\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key)\n            const isFunc = typeof descriptor.value === \"function\"\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            )\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto)\n        wrappers.set(proto, wrapper)\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nexport function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event))\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nexport function isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nexport function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nexport function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nexport function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener\n}\n","import {\n    isStopped,\n    setCurrentTarget,\n    setEventPhase,\n    setPassiveListener,\n    wrapEvent,\n} from \"./event.mjs\"\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap()\n\n// Listener types\nconst CAPTURE = 1\nconst BUBBLE = 2\nconst ATTRIBUTE = 3\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget)\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this)\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this)\n\n            // Traverse to the tail while removing old value.\n            let prev = null\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next)\n                    } else {\n                        listeners.delete(eventName)\n                    }\n                } else {\n                    prev = node\n                }\n\n                node = node.next\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                }\n                if (prev === null) {\n                    listeners.set(eventName, newNode)\n                } else {\n                    prev.next = newNode\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    )\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this)\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    })\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i])\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map())\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length)\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i]\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this)\n        const optionsIsObj = isObject(options)\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        }\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName)\n        if (node === undefined) {\n            listeners.set(eventName, newNode)\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node\n            node = node.next\n        }\n\n        // Add it.\n        prev.next = newNode\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this)\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n\n        let prev = null\n        let node = listeners.get(eventName)\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n                return\n            }\n\n            prev = node\n            node = node.next\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this)\n        const eventName = event.type\n        let node = listeners.get(eventName)\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event)\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n            } else {\n                prev = node\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            )\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent)\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err)\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent)\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next\n        }\n        setPassiveListener(wrappedEvent, null)\n        setEventPhase(wrappedEvent, 0)\n        setCurrentTarget(wrappedEvent, null)\n\n        return !wrappedEvent.defaultPrevented\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype)\n}\n\nexport { defineEventAttribute, EventTarget }\nexport default EventTarget\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    let n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Table, Type } from \"apache-arrow\";\nvar ArrowTable = /** @class */ (function () {\n    function ArrowTable(dataBuffer, indexBuffer, columnsBuffer, styler) {\n        var _this = this;\n        this.getCell = function (rowIndex, columnIndex) {\n            var isBlankCell = rowIndex < _this.headerRows && columnIndex < _this.headerColumns;\n            var isIndexCell = rowIndex >= _this.headerRows && columnIndex < _this.headerColumns;\n            var isColumnsCell = rowIndex < _this.headerRows && columnIndex >= _this.headerColumns;\n            if (isBlankCell) {\n                var classNames = [\"blank\"];\n                if (columnIndex > 0) {\n                    classNames.push(\"level\" + rowIndex);\n                }\n                return {\n                    type: \"blank\",\n                    classNames: classNames.join(\" \"),\n                    content: \"\"\n                };\n            }\n            else if (isColumnsCell) {\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"col_heading\",\n                    \"level\" + rowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                return {\n                    type: \"columns\",\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.columnsTable, dataColumnIndex, rowIndex)\n                };\n            }\n            else if (isIndexCell) {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var classNames = [\n                    \"row_heading\",\n                    \"level\" + columnIndex,\n                    \"row\" + dataRowIndex\n                ];\n                return {\n                    type: \"index\",\n                    id: \"T_\" + _this.uuid + \"level\" + columnIndex + \"_row\" + dataRowIndex,\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.indexTable, dataRowIndex, columnIndex)\n                };\n            }\n            else {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"data\",\n                    \"row\" + dataRowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                var content = _this.styler\n                    ? _this.getContent(_this.styler.displayValuesTable, dataRowIndex, dataColumnIndex)\n                    : _this.getContent(_this.dataTable, dataRowIndex, dataColumnIndex);\n                return {\n                    type: \"data\",\n                    id: \"T_\" + _this.uuid + \"row\" + dataRowIndex + \"_col\" + dataColumnIndex,\n                    classNames: classNames.join(\" \"),\n                    content: content\n                };\n            }\n        };\n        this.getContent = function (table, rowIndex, columnIndex) {\n            var column = table.getColumnAt(columnIndex);\n            if (column === null) {\n                return \"\";\n            }\n            var columnTypeId = _this.getColumnTypeId(table, columnIndex);\n            switch (columnTypeId) {\n                case Type.Timestamp: {\n                    return _this.nanosToDate(column.get(rowIndex));\n                }\n                default: {\n                    return column.get(rowIndex);\n                }\n            }\n        };\n        this.dataTable = Table.from(dataBuffer);\n        this.indexTable = Table.from(indexBuffer);\n        this.columnsTable = Table.from(columnsBuffer);\n        this.styler = styler\n            ? {\n                caption: styler.caption,\n                displayValuesTable: Table.from(styler.displayValues),\n                styles: styler.styles,\n                uuid: styler.uuid\n            }\n            : undefined;\n    }\n    Object.defineProperty(ArrowTable.prototype, \"rows\", {\n        get: function () {\n            return this.indexTable.length + this.columnsTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columns\", {\n        get: function () {\n            return this.indexTable.numCols + this.columnsTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerRows\", {\n        get: function () {\n            return this.rows - this.dataRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerColumns\", {\n        get: function () {\n            return this.columns - this.dataColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataRows\", {\n        get: function () {\n            return this.dataTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataColumns\", {\n        get: function () {\n            return this.dataTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"uuid\", {\n        get: function () {\n            return this.styler && this.styler.uuid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"caption\", {\n        get: function () {\n            return this.styler && this.styler.caption;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"styles\", {\n        get: function () {\n            return this.styler && this.styler.styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"table\", {\n        get: function () {\n            return this.dataTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"index\", {\n        get: function () {\n            return this.indexTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columnTable\", {\n        get: function () {\n            return this.columnsTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Serialize arrow table.\n     */\n    ArrowTable.prototype.serialize = function () {\n        return {\n            data: this.dataTable.serialize(),\n            index: this.indexTable.serialize(),\n            columns: this.columnsTable.serialize()\n        };\n    };\n    /**\n     * Returns apache-arrow specific typeId of column.\n     */\n    ArrowTable.prototype.getColumnTypeId = function (table, columnIndex) {\n        return table.schema.fields[columnIndex].type.typeId;\n    };\n    ArrowTable.prototype.nanosToDate = function (nanos) {\n        return new Date(nanos / 1e6);\n    };\n    return ArrowTable;\n}());\nexport { ArrowTable };\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\";\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\nvar ComponentMessageType;\n(function (ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nvar Streamlit = /** @class */ (function () {\n    function Streamlit() {\n    }\n    /**\n     * The Streamlit component API version we're targetting.\n     * There's currently only 1!\n     */\n    Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */\n    Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */\n    Streamlit.setComponentReady = function () {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */\n    Streamlit.setFrameHeight = function (height) {\n        if (height === undefined) {\n            // `height` is optional. If undefined, it defaults to scrollHeight,\n            // which is the entire height of the element minus its border,\n            // scrollbar, and margin.\n            height = document.body.scrollHeight;\n        }\n        if (height === Streamlit.lastFrameHeight) {\n            // Don't bother updating if our height hasn't changed.\n            return;\n        }\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height: height });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */\n    Streamlit.setComponentValue = function (value) {\n        var dataType;\n        if (value instanceof ArrowTable) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        }\n        else if (isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        }\n        else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        }\n        else {\n            dataType = \"json\";\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */\n    Streamlit.onMessageEvent = function (event) {\n        var type = event.data[\"type\"];\n        switch (type) {\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */\n    Streamlit.onRenderMessage = function (data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0\n            ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n            : {};\n        args = __assign(__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) {\n            _injectTheme(theme);\n        }\n        // Dispatch a render event!\n        var eventData = { disabled: disabled, args: args, theme: theme };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function (argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function (_a) {\n            var key = _a.key, value = _a.value;\n            return [key, Streamlit.toArrowTable(value)];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function (df) {\n        var _a = df.data, data = _a.data, index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new ArrowTable(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */\n    Streamlit.sendBackMsg = function (type, data) {\n        window.parent.postMessage(__assign({ isStreamlitMessage: true, type: type }, data), \"*\");\n    };\n    return Streamlit;\n}());\nexport { Streamlit };\nvar _injectTheme = function (theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \" + theme.primaryColor + \";\\n      --background-color: \" + theme.backgroundColor + \";\\n      --secondary-background-color: \" + theme.secondaryBackgroundColor + \";\\n      --text-color: \" + theme.textColor + \";\\n      --font: \" + theme.font + \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \";\n};\n/** True if the value is a TypedArray. */\nfunction isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray =\n            value instanceof BigInt64Array || value instanceof BigUint64Array;\n    }\n    catch (e) {\n        // Ignore cause Safari does not support this\n        // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return (value instanceof Int8Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint8ClampedArray ||\n        value instanceof Int16Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        isBigIntArray);\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport React from \"react\";\nimport { Streamlit } from \"./streamlit\";\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nvar StreamlitComponentBase = /** @class */ (function (_super) {\n    __extends(StreamlitComponentBase, _super);\n    function StreamlitComponentBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StreamlitComponentBase.prototype.componentDidMount = function () {\n        // After we're rendered for the first time, tell Streamlit that our height\n        // has changed.\n        Streamlit.setFrameHeight();\n    };\n    StreamlitComponentBase.prototype.componentDidUpdate = function () {\n        // After we're updated, tell Streamlit that our height may have changed.\n        Streamlit.setFrameHeight();\n    };\n    return StreamlitComponentBase;\n}(React.PureComponent));\nexport { StreamlitComponentBase };\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(WrappedComponent) {\n    var ComponentWrapper = /** @class */ (function (_super) {\n        __extends(ComponentWrapper, _super);\n        function ComponentWrapper(props) {\n            var _this = _super.call(this, props) || this;\n            _this.componentDidMount = function () {\n                // Set up event listeners, and signal to Streamlit that we're ready.\n                // We won't render the component until we receive the first RENDER_EVENT.\n                Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n                Streamlit.setComponentReady();\n            };\n            _this.componentDidUpdate = function () {\n                // If our child threw an error, we display it in render(). In this\n                // case, the child won't be mounted and therefore won't call\n                // `setFrameHeight` on its own. We do it here so that the rendered\n                // error will be visible.\n                if (_this.state.componentError != null) {\n                    Streamlit.setFrameHeight();\n                }\n            };\n            _this.componentWillUnmount = function () {\n                Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n            };\n            /**\n             * Streamlit is telling this component to redraw.\n             * We save the render data in State, so that it can be passed to the\n             * component in our own render() function.\n             */\n            _this.onRenderEvent = function (event) {\n                // Update our state with the newest render data\n                var renderEvent = event;\n                _this.setState({ renderData: renderEvent.detail });\n            };\n            _this.render = function () {\n                // If our wrapped component threw an error, display it.\n                if (_this.state.componentError != null) {\n                    return (React.createElement(\"div\", null,\n                        React.createElement(\"h1\", null, \"Component Error\"),\n                        React.createElement(\"span\", null, _this.state.componentError.message)));\n                }\n                // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n                if (_this.state.renderData == null) {\n                    return null;\n                }\n                return (React.createElement(WrappedComponent, { width: window.innerWidth, disabled: _this.state.renderData.disabled, args: _this.state.renderData.args, theme: _this.state.renderData.theme }));\n            };\n            _this.state = {\n                renderData: undefined,\n                componentError: undefined\n            };\n            return _this;\n        }\n        /**\n         * Error boundary function. This will be called if our wrapped\n         * component throws an error. We store the caught error in our state,\n         * and display it in the next render().\n         */\n        ComponentWrapper.getDerivedStateFromError = function (error) {\n            return { componentError: error };\n        };\n        return ComponentWrapper;\n    }(React.PureComponent));\n    return hoistNonReactStatics(ComponentWrapper, WrappedComponent);\n}\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","/** @license React v16.14.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var l=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.forward_ref\"):60112,y=n?Symbol.for(\"react.suspense\"):60113,z=n?Symbol.for(\"react.memo\"):60115,A=n?Symbol.for(\"react.lazy\"):\n60116,B=\"function\"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,\"setState\")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||\"object\"!==typeof a?f=null:(f=B&&a[B]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if(\"object\"===d)throw c=\"\"+a,Error(C(31,\"[object Object]\"===c?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":c,\"\"));return g}function V(a,b,c){return null==a?0:T(a,\"\",b,c)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+c)),e.push(a))}function X(a,b,c,e,d){var g=\"\";null!=c&&(g=(\"\"+c).replace(P,\"$&/\")+\"/\");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version=\"16.14.0\";\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n"],"sourceRoot":""}